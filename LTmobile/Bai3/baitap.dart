/*
B√ÄI T·∫¨P: C·∫•u tr√∫c d·ªØ li·ªáu trong Dart
====================================
B√†i 1: List
 
C√≥ bao nhi√™u c√°ch ƒë·ªÉ khai b√°o m·ªôt List trong ƒëo·∫°n code? Li·ªát k√™ v√† gi·∫£i th√≠ch t·ª´ng c√°ch.
Cho List ['A', 'B', 'C']. Vi·∫øt code ƒë·ªÉ:
 
Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
X√≥a ph·∫ßn t·ª≠ 'B'
In ra ƒë·ªô d√†i c·ªßa List
 
 
ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
 
dartCopyvar list = [1, 2, 3, 4, 5];
list.removeWhere((e) => e % 2 == 0);
print(list);
 
Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa c√°c ph∆∞∆°ng th·ª©c:
 
remove() v√† removeAt()
add() v√† insert()
addAll() v√† insertAll()
 
 
====================================
B√†i 2: Set
 
Set kh√°c List ·ªü nh·ªØng ƒëi·ªÉm n√†o? N√™u √≠t nh·∫•t 3 ƒëi·ªÉm kh√°c bi·ªát.
Cho hai Set:
 
dartCopyvar set1 = {1, 2, 3};
var set2 = {3, 4, 5};
T√≠nh k·∫øt qu·∫£ c·ªßa:
 
Union (h·ª£p)
Intersection (giao)
Difference (hi·ªáu) c·ªßa set1 v·ªõi set2
 
 
ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
 
dartCopyvar mySet = Set.from([1, 2, 2, 3, 3, 4]);
print(mySet.length);
 
 
 
====================================
B√†i 3: Map
 
Vi·∫øt code ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu sau v·ªõi Map:
 
dartCopyMap<String, dynamic> user = {
  'name': 'Nam',
  'age': 20,
  'isStudent': true
};
 
Th√™m email: 'nam@gmail.com'
C·∫≠p nh·∫≠t age th√†nh 21
X√≥a tr∆∞·ªùng isStudent
Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng
 
 
So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:
 
dartCopyuser['phone']
user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'
 
Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.
 
 
====================================
Ph·∫ßn 4: Runes
 
Runes ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨? Cho v√≠ d·ª• c·ª• th·ªÉ.
Vi·∫øt code ƒë·ªÉ:
 
 
T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes
 
*/

// B√†i 1: List
void listOperations() {
  List<String> list = ['A', 'B', 'C'];
  
  list.add('D'); // Th√™m 'D' v√†o cu·ªëi
  list.insert(1, 'X'); // Ch√®n 'X' v√†o v·ªã tr√≠ th·ª© 1
  list.remove('B'); // X√≥a ph·∫ßn t·ª≠ 'B'
  
  print("List sau khi c·∫≠p nh·∫≠t: $list");
  print("ƒê·ªô d√†i c·ªßa List: ${list.length}");

  var numbers = [1, 2, 3, 4, 5];
  numbers.removeWhere((e) => e % 2 == 0);
  print("Danh s√°ch sau khi lo·∫°i b·ªè s·ªë ch·∫µn: $numbers");
}

// B√†i 2: Set
void setOperations() {
  var set1 = {1, 2, 3};
  var set2 = {3, 4, 5};

  print("H·ª£p: ${set1.union(set2)}");
  print("Giao: ${set1.intersection(set2)}");
  print("Hi·ªáu: ${set1.difference(set2)}");

  var mySet = Set.from([1, 2, 2, 3, 3, 4]);
  print("S·ªë ph·∫ßn t·ª≠ trong Set: ${mySet.length}");
}

// B√†i 3: Map
void mapOperations() {
  Map<String, dynamic> user = {
    'name': 'Khang',
    'age': 21,
    'isStudent': true
  };

  user['email'] = 'pebaoan.bh@gmail.com';
  user['age'] = 21;
  user.remove('isStudent');
  
  print("Map sau khi c·∫≠p nh·∫≠t: $user");
  print("Map c√≥ ch·ª©a key 'phone' kh√¥ng? ${user.containsKey('phone')}");

  print("Truy xu·∫•t gi√° tr·ªã c·ªßa 'phone': ${user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'}");
}

void printMap(Map<dynamic, dynamic> map) {
  map.forEach((key, value) {
    print('$key: $value');
  });
}

// B√†i 4: Runes
void runeOperations() {
  Runes emoji = Runes('\u{1F600}'); // üòÄ
  String emojiStr = String.fromCharCodes(emoji);

  print("Emoji: $emojiStr");
  print("S·ªë ƒëi·ªÉm m√£ trong Runes: ${emoji.length}");
}

void main() {
  listOperations();
  print("----------------------------");
  setOperations();
  print("----------------------------");
  mapOperations();
  print("----------------------------");
  runeOperations();
}
